{"mappings":"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","sources":["scripts/main.js","L.js"],"sourcesContent":["//importar librerias\r\nimport L from \"leaflet\";\r\n\r\n//zoom\r\nvar zoom = 9;\r\n\r\n//centrar el mapa\r\nvar map = L.map(\"map\").setView([43.0621, -2.43755], zoom);\r\n\r\n// a単adir la imagen del mapa\r\nL.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\").addTo(map);\r\n\r\n//a単adir url\r\nconst url = \"http://10.10.17.150/api/\";\r\n\r\n//crear variable del Token\r\nvar sToken = \"\";\r\n\r\nvar aTotalBalizas;\r\n\r\n//icono sin seleccionar\r\nvar iconoSinSeleccionar = L.icon({\r\n  customId: \"\",\r\n  iconUrl: \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-grey.png\",\r\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\r\n  iconSize: [25, 41],\r\n  iconAnchor: [12, 41],\r\n  popupAnchor: [1, -34],\r\n  shadowSize: [41, 41],\r\n});\r\n\r\n//icono seleccionado\r\nvar iconoSeleccionado = L.icon({\r\n  customId: \"\",\r\n  iconUrl: \"https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-black.png\",\r\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\r\n  iconSize: [25, 41],\r\n  iconAnchor: [12, 41],\r\n  popupAnchor: [1, -34],\r\n  shadowSize: [41, 41],\r\n});\r\n\r\n//al cargar la pagina\r\n$(\"document\").ready(function () {\r\n  //llamar a funcion de obtener el maximo de balizas, a traves del select\r\n  obtenerMaxBaliza();\r\n\r\n  //si la autentificacion devuelve true\r\n  var promise = Login();\r\n  //entonces hacer lo que esta dentro del then\r\n  promise.then(function (result) {\r\n    //llamar al login y guardar el token\r\n    sToken = result.token;\r\n    //console.log(\"TOKEN: \" + sToken);\r\n    ObtenerMeteorologias();\r\n  });\r\n\r\n  //convertir en draggable\r\n  $(`#icono1`).draggable({\r\n    revert: \"invalid\",\r\n    helper: \"clone\",\r\n  });\r\n\r\n  $(`#icono2`).draggable({\r\n    revert: \"invalid\",\r\n    helper: \"clone\",\r\n  });\r\n\r\n  $(`#icono3`).draggable({\r\n    revert: \"invalid\",\r\n    helper: \"clone\",\r\n  });\r\n\r\n  $(`#icono4`).draggable({\r\n    revert: \"invalid\",\r\n    helper: \"clone\",\r\n  });\r\n});\r\n\r\n//crear objeto de tipo set\r\nvar oMeteorologiasGuardadas = {};\r\n//poner en el select un numero por defecto\r\nvar iNumMaxBalizas = 5;\r\n//crear array datosTiempo\r\nvar aDatosTiempoBaliza = [];\r\n//crear objeto datoActual\r\nvar oDatoActual;\r\n//crear array para meter los marcadores\r\nvar aTotalMarcadores = [];\r\n\r\n//dar valor de numero de balizas al localStorage\r\n$(\"#selectBaliza\").on(\"change\", function () {\r\n  iNumMaxBalizas = parseInt(document.getElementById(\"selectBaliza\").value);\r\n  localStorage.setItem(\"iMaxMeteorologia\", iNumMaxBalizas);\r\n  //console.log(iNumMaxBalizas);\r\n});\r\n\r\n//funcion de obtener las balizas de meteorologia\r\nfunction ObtenerMeteorologias() {\r\n  //crear array de marcadores\r\n  aTotalMarcadores = [];\r\n  //crear promesa\r\n  var promise = GetMeteorologias();\r\n  //si devuelve true, hacer lo del then\r\n  promise.then(function (data) {\r\n    //parsear y guardar todas las balizas en array\r\n    aTotalBalizas = JSON.parse(data);\r\n    //console.log(\"balizas:\" + aTotalBalizas);\r\n    //recorrer array de balizas\r\n    aTotalBalizas.forEach((element) => {\r\n      //dar a las balizas los markers y su customId\r\n      const marker = L.marker([element.latitud, element.longitud], {\r\n        icon: iconoSinSeleccionar,\r\n        customId: `marker${element.codigo}`,\r\n      })\r\n        //mostrar nombre de pueblo\r\n        .bindPopup(`${element.nombre}`)\r\n        //al hacer click en el marcador\r\n        .on(\"click\", function () {\r\n          //si la baliza no esta repetida y no sobrepasa el limite de balizas seleccionado\r\n          if (!estaMeteorologia(element.codigo) && cantidadBalizasSeleccionadas() < iNumMaxBalizas) {\r\n            //guardar la baliza en el objeto Set\r\n            oMeteorologiasGuardadas[element.codigo] = {\r\n              temperatura: true,\r\n              humedad: true,\r\n              velocidadViento: false,\r\n              presionAtmosferica: false,\r\n            };\r\n            //guardar en el localStorage\r\n            guardarDatosStorage(oMeteorologiasGuardadas);\r\n            //llamar a funcion de mostrar carta\r\n            mostrarCarta(marker, element.codigo);\r\n          }\r\n        })\r\n        .addTo(map);\r\n      //a単adir marker al array\r\n      aTotalMarcadores.push(marker);\r\n    });\r\n    //obtener localStorage\r\n    oMeteorologiasGuardadas = obtenerDatosStorage();\r\n    for (const codigo in oMeteorologiasGuardadas) {\r\n      // Codigo = \"Zi6355256\"\r\n      // oMeteorologias[Codigo] = {temperatura: true, humedad: true, velocidadViento: false, presionAtmosferica: false}\r\n      let marker;\r\n      //recorrer array de objetos\r\n      aTotalMarcadores.forEach((element) => {\r\n        //recorrer el id y se guarda el correspondiente\r\n        if (element.options.customId == `marker${codigo}`) {\r\n          marker = element;\r\n        }\r\n      });\r\n      //mostrar carta\r\n      mostrarCarta(marker, codigo);\r\n    }\r\n  });\r\n  // Se inicia el cargado de los datos cada minuto\r\n  setInterval(function () {\r\n    actualizarDatos();\r\n  }, 6000);\r\n}\r\n\r\n//funcion de mostrar los divs de las cartas\r\nfunction mostrarCarta(marker, codigo) {\r\n  //poner el icono como seleccionado\r\n  marker.setIcon(iconoSeleccionado);\r\n  //crear promesa\r\n  var promise = GetMeteorologia(codigo);\r\n  promise.then(function (data) {\r\n    //si hace la promesa, entra en el then\r\n    var infoBaliza = JSON.parse(data);\r\n    aDatosTiempoBaliza.push(infoBaliza);\r\n    //console.log(\"array:\" + aDatosTiempoBaliza);\r\n    oDatoActual = aDatosTiempoBaliza.find((item) => item.codigo == codigo);\r\n    //a単adir baliza a cartas y mostrar datos\r\n    document.getElementById(\"cartas\").innerHTML += `\r\n              <div id=\"${codigo}\" class=\"card text-white mb-3 \" style=\"max-width: 18rem; background-color: dodgerblue\">\r\n              <i class=\"bi bi-x boton\" id=\"boton${codigo}\"></i>\r\n              <div class=\"card-header\"><h5>${oDatoActual.nombre}</h5></div>\r\n              <div class=\"card-body\">\r\n              <div>\r\n              <p id=\"temperatura${codigo}\">Temperatura: ${oDatoActual.temperatura}</p>\r\n              <p id=\"humedad${codigo}\">Humedad: ${oDatoActual.humedad}</p>\r\n              <p id=\"presionAtmosferica${codigo}\">Presion atmosferica: ${oDatoActual.presionAtmosferica}</p>\r\n              <p id=\"velocidadViento${codigo}\">Velocidad del viento: ${oDatoActual.velocidadViento}</p>\r\n              </div>              \r\n              </div>\r\n            `;\r\n    //al hacer click en la x de la carta\r\n    $(`.bi-x`).on(\"click\", function (event) {\r\n      // Elimina el div por el id del div\r\n      var codigoCarta = $(event.target).attr(\"id\");\r\n      //console.log(\"codigoCarta:\" + codigoCarta);\r\n      codigoCarta = codigoCarta.replace(\"boton\", \"\");\r\n      //eliminar carta\r\n      $(`#${codigoCarta}`).remove();\r\n      //eliminar del array\r\n      delete oMeteorologiasGuardadas[codigoCarta];\r\n      //guardar en el Storage\r\n      guardarDatosStorage(oMeteorologiasGuardadas);\r\n      //console.log(oMeteorologiasGuardadas);\r\n      // Buscamos el marcador por su customId\r\n      aTotalMarcadores.forEach((element) => {\r\n        // Recorremos los Id y se guarda el correspondiente\r\n        if (element.options.customId == `marker${codigoCarta}`) {\r\n          let markerBorrar = element;\r\n          //poner marker a iconoSinSeleccionar\r\n          markerBorrar.setIcon(iconoSinSeleccionar);\r\n        }\r\n      });\r\n    });\r\n\r\n    // A単adir Drag & Drop al panel meteorologico\r\n    $(\".card\").droppable({\r\n      drop: function (event, ui) {\r\n        //crear el draggable del icono\r\n        var draggableId = ui.draggable[0].id;\r\n        //console.log(\"id:\" + draggableId);\r\n        //coger el codigo de la carta\r\n        var codigoCarta = $(event.target).attr(\"id\");\r\n        if (draggableId == \"icono2\") {\r\n          //si es el mismo, mostrar\r\n          $(`#presionAtmosferica${codigoCarta}`).show();\r\n          //poner el atributo del objeto a true\r\n          oMeteorologiasGuardadas[codigo][\"presionAtmosferica\"] = true;\r\n          //guardar en Storage\r\n          guardarDatosStorage(oMeteorologiasGuardadas);\r\n        }\r\n        if (draggableId == \"icono4\") {\r\n          //si es el mismo, mostrar\r\n          $(`#velocidadViento${codigoCarta}`).show();\r\n          //poner el atributo del objeto a true\r\n          oMeteorologiasGuardadas[codigo][\"velocidadViento\"] = true;\r\n          //guardar en Storage\r\n          guardarDatosStorage(oMeteorologiasGuardadas);\r\n        }\r\n      },\r\n    });\r\n    var balizaActual = oMeteorologiasGuardadas[codigo];\r\n    //console.log(\"balizaActual:\" + balizaActual);\r\n    //ocultar la info de las balizas\r\n    if (!balizaActual[\"temperatura\"]) $(`#temperatura${codigo}`).hide();\r\n    if (!balizaActual[\"presionAtmosferica\"]) $(`#presionAtmosferica${codigo}`).hide();\r\n    if (!balizaActual[\"humedad\"]) $(`#humedad${codigo}`).hide();\r\n    if (!balizaActual[\"velocidadViento\"]) $(`#velocidadViento${codigo}`).hide();\r\n  });\r\n}\r\n\r\n//funcion para actualizar los datos de las balizas\r\nfunction actualizarDatos() {\r\n  //buscar codigo de las balizas guardadas\r\n  for (const codigo in oMeteorologiasGuardadas) {\r\n    if (oMeteorologiasGuardadas[codigo]) {\r\n      //hacer promesa\r\n      var promise = GetMeteorologia(codigo);\r\n      promise.then(function (respuesta) {\r\n        //parsear dato\r\n        oDato = JSON.parse(respuesta);\r\n        //actualizar datos\r\n        $(`#temperatura${codigo}`).text(`Temperatura: ${oDato.temperatura}`);\r\n        $(`#humedad${codigo}`).text(`Humedad: ${oDato.humedad}`);\r\n        $(`#presionAtmosferica${codigo}`).text(`Presion atmosferica: ${oDato.presionAtmosferica}`);\r\n        $(`#velocidadViento${codigo}`).text(`Velocidad del viento: ${oDato.velocidadViento}`);\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n//funcion de obtener el maximo de balizas\r\nfunction obtenerMaxBaliza() {\r\n  //si el valor es nulo, sera 5, sino, su valor\r\n  iNumMaxBalizas = localStorage.getItem(\"iMaxMeteorologia\") || 5;\r\n  //dar valor\r\n  document.getElementById(\"selectBaliza\").value = iNumMaxBalizas;\r\n}\r\n\r\n//funcion de guardar el localStorage\r\nfunction guardarDatosStorage(balizas) {\r\n  localStorage.setItem(\"marcadores\", JSON.stringify(balizas));\r\n}\r\n\r\n//funcion para obtener los datos del localStorage\r\nfunction obtenerDatosStorage() {\r\n  var marcadoresStorage = localStorage.getItem(\"marcadores\");\r\n  if (marcadoresStorage == undefined) {\r\n    //si es indefinido, poner array a vacio\r\n    marcadoresStorage = {};\r\n  } else {\r\n    //parsear\r\n    marcadoresStorage = JSON.parse(marcadoresStorage);\r\n  }\r\n  return marcadoresStorage;\r\n}\r\n\r\n//funcion para ver si esta la baliza o no\r\nfunction estaMeteorologia(codigo) {\r\n  for (const codigoMeteorologia in oMeteorologiasGuardadas) {\r\n    if (codigoMeteorologia == codigo) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n//funcion para obtener la cantidad de balizas guardadas\r\nfunction cantidadBalizasSeleccionadas() {\r\n  return Object.keys(oMeteorologiasGuardadas).length;\r\n}\r\n\r\n//funcion de login\r\nfunction Login(user = \"test\", password = \"test\") {\r\n  return $.ajax({\r\n    type: \"POST\",\r\n    dataType: \"json\",\r\n    contentType: \"application/json\",\r\n    url: url + \"Users/Authenticate/\",\r\n    data: JSON.stringify({\r\n      username: user,\r\n      password: password,\r\n    }),\r\n    headers: {\r\n      accept: \"application/json\",\r\n      dataType: \"json\",\r\n      contentType: \"application/json\",\r\n    },\r\n  }).fail(function (err) {\r\n    console.log(\"ERROR: \" + err);\r\n  });\r\n}\r\n\r\n//funcion para obtener las balizas de meteorologia\r\nfunction GetMeteorologias() {\r\n  return $.ajax({\r\n    type: \"GET\",\r\n    dataType: \"html\",\r\n    url: url + \"Meteorologia\",\r\n    headers: {\r\n      accept: \"application/json\",\r\n      //le pasamos el token para la autentificacion\r\n      authorization: \"Bearer \" + sToken,\r\n    },\r\n  }).fail(function (err) {\r\n    console.log(\"ERROR: \" + err);\r\n  });\r\n}\r\n\r\n//funcion para obtener la baliza de meteorologia\r\nfunction GetMeteorologia(id) {\r\n  //console.log(\"ID \" + id);\r\n  return $.ajax({\r\n    type: \"GET\",\r\n    dataType: \"html\",\r\n    url: url + \"Meteorologia/\" + id,\r\n    headers: {\r\n      accept: \"application/json\",\r\n      //le pasamos el token para la autentificacion\r\n      authorization: \"Bearer \" + sToken,\r\n    },\r\n  }).fail(function (err) {\r\n    console.log(\"ERROR: \" + err);\r\n  });\r\n}\r\n","module.exports=L;"],"names":["$dfce7f2a1c53e63f$var$map","$parcel$interopDefault","$66ba7a37141049c3$exports","L","map","setView","tileLayer","addTo","$dfce7f2a1c53e63f$var$sToken","$dfce7f2a1c53e63f$var$iconoSinSeleccionar","icon","customId","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","$dfce7f2a1c53e63f$var$iconoSeleccionado","$","ready","$dfce7f2a1c53e63f$var$iNumMaxBalizas","localStorage","getItem","getElementById","value","user","password","ajax","type","dataType","contentType","url","$dfce7f2a1c53e63f$var$url","data","JSON","stringify","username","headers","accept","err","log","$dfce7f2a1c53e63f$var$Login","then","result","token","$dfce7f2a1c53e63f$var$aTotalMarcadores","authorization","marcadoresStorage","parse","forEach","element","marker","latitud","longitud","codigo","bindPopup","nombre","on","codigoMeteorologia","$dfce7f2a1c53e63f$var$oMeteorologiasGuardadas","$dfce7f2a1c53e63f$var$estaMeteorologia","Object","keys","length","temperatura","humedad","velocidadViento","presionAtmosferica","$dfce7f2a1c53e63f$var$guardarDatosStorage","$dfce7f2a1c53e63f$var$mostrarCarta","push","undefined","options","setInterval","$dfce7f2a1c53e63f$var$GetMeteorologia","respuesta","oDato","text","$dfce7f2a1c53e63f$var$actualizarDatos","draggable","revert","helper","$dfce7f2a1c53e63f$var$oDatoActual","$dfce7f2a1c53e63f$var$aDatosTiempoBaliza","setIcon","infoBaliza","find","item","document","innerHTML","event","codigoCarta","target","attr","replace","remove","ui","draggableId","id","show","balizaActual","hide","balizas","setItem","parseInt"],"version":3,"file":"index.ee579a84.js.map"}